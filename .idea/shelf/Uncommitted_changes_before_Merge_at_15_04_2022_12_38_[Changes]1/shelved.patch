Index: pages/api/spotify/callback.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pages/api/spotify/callback.ts b/pages/api/spotify/callback.ts
new file mode 100644
--- /dev/null	
+++ b/pages/api/spotify/callback.ts	
@@ -0,0 +1,45 @@
+import {NextApiRequest, NextApiResponse} from "next";
+
+type Data = {
+    access_token: string,
+    token_type: string,
+    scope: string,
+    expires_in: number,
+    refresh_token: string
+}
+
+const clientId = process.env.SPOTIFY_CLIENT_ID
+const clientSecret = process.env.SPOTIFY_CLIENT_SECRET
+const redirectUri = process.env.SPOTIFY_REDIRECT_URI
+
+export default async function handler(
+    req: NextApiRequest,
+    res: NextApiResponse<Data>,
+) {
+    const code = req.query.code || null;
+    const state = req.query.state || null;
+
+    if (state === null) {
+        res.redirect('/#' +
+            new URLSearchParams('error=state_mismatch')
+        )
+    } else {
+        const authOptions = {
+            form: {
+                code: code,
+                redirect_uri: redirectUri,
+                grant_type: 'authorization_code'
+            },
+            headers: {
+                'Authorization': 'Basic ' + (new Buffer(clientId + ':' + clientSecret).toString('base64')),
+                'Content-Type': 'application/x-www-form-urlencoded'
+            },
+            json: true
+        };
+
+        const response = await fetch('https://accounts.spotify.com/api/token', authOptions)
+        const data = response.json();
+
+        res.status(200).json(await data)
+    }
+}
Index: pages/api/spotify/login.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pages/api/spotify/login.ts b/pages/api/spotify/login.ts
new file mode 100644
--- /dev/null	
+++ b/pages/api/spotify/login.ts	
@@ -0,0 +1,28 @@
+import {NextApiRequest, NextApiResponse} from "next";
+import generateRandomString from "$lib/generateRandomString";
+import * as querystring from "querystring";
+
+type Data = {
+    redirectUri: string;
+};
+
+const clientId = 'CLIENT_ID' //TODO: app has to registered at spotify
+const redirectUri = 'REDIRECT_URI' //TODO: uri needs to be told spotify and as to math 1:1 with the told one
+
+const state = generateRandomString(16)
+const scope = 'playlist-modify-public playlist-read-private playlist-modify-private'
+
+export default function handler(
+    res: NextApiResponse<Data>,
+) {
+    res.status(200).redirect('https://accounts.spotify.com/authorize?' +
+        new URLSearchParams(
+            `response_type=code&
+            client_id=${clientId}&
+            scope=${scope}&
+            redirect_uri=${redirectUri}&
+            state=${state}`
+        )
+    );
+}
+
Index: pages/spotify/login.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pages/spotify/login.tsx b/pages/spotify/login.tsx
new file mode 100644
--- /dev/null	
+++ b/pages/spotify/login.tsx	
@@ -0,0 +1,18 @@
+import { Center, Button } from "@chakra-ui/react";
+
+export function Login() {
+
+    function auth() {
+
+    }
+
+    return (
+        <Center h="100vh">
+            <Button>
+                Auth with Spotify
+            </Button>
+        </Center>
+    )
+}
+
+export default Login
Index: lib/generateRandomString.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/generateRandomString.ts b/lib/generateRandomString.ts
new file mode 100644
--- /dev/null	
+++ b/lib/generateRandomString.ts	
@@ -0,0 +1,11 @@
+
+export default function generateRandomString(length: number) {
+    let result           = '';
+    const characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
+    const charactersLength = characters.length;
+    for ( let i = 0; i < length; i++ ) {
+        result += characters.charAt(Math.floor(Math.random() *
+            charactersLength));
+    }
+    return result;
+}
